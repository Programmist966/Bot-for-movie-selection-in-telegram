# This version is without comments
import sqlite3
import telebot
import openai
from data import ChatGPT_API, Bot_API, db_name
from telebot import types
import urllib.parse
from bs4 import BeautifulSoup
import requests
openai.api_key = ChatGPT_API  
bot = telebot.TeleBot(Bot_API) 

user_data = {}

years = ['1980-–µ', '1990-–µ', '2000-–µ', '2010-–µ', '2020-–µ']
vibes = ['–í–µ—Å–µ–ª–æ–µ', '–ì—Ä—É—Å—Ç–Ω–æ–µ', '–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ', '–¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ', '–†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ', '–ù–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–æ–µ', '–ò–Ω—Ç—Ä–∏–≥—É—é—â–µ–µ', '–ú—Ä–∞—á–Ω–æ–µ', '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ', '–°—Ç—Ä–µ—Å—Å–æ–≤–æ–µ', '–õ–µ–≥–∫–æ–µ']
genres = ['–ö–æ–º–µ–¥–∏—è', '–•–æ—Ä—Ä–æ—Ä', '–î—Ä–∞–º–∞', '–¢—Ä–∏–ª–ª–µ—Ä', '–ë–æ–µ–≤–∏–∫', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ú–µ–ª–æ–¥—Ä–∞–º–∞', '–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π']

def create_db():
    with sqlite3.connect(db_name) as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, chat_id INTEGER)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS watched_movies (user_id INTEGER, movie_name TEXT, rating INTEGER, FOREIGN KEY(user_id) REFERENCES users(id))''')

def add_user(chat_id):
    with sqlite3.connect(db_name) as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (chat_id) VALUES (?)', (chat_id,))

def add_watched_movie(chat_id, movie_name):
    with sqlite3.connect(db_name) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
        user = cursor.fetchone()
        if user:
            user_id = user[0]
            cursor.execute('INSERT INTO watched_movies (user_id, movie_name, rating) VALUES (?, ?, ?)', (user_id, movie_name, 5))

def get_watched_movies_with_ratings(user_id):
    with sqlite3.connect(db_name) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT movie_name, rating FROM watched_movies WHERE user_id = ?', (user_id,))
        return {row[0]: row[1] for row in cursor.fetchall()}

def get_watched_movies_info(user_id):
    with sqlite3.connect(db_name) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT movie_name, COALESCE(rating, 0) FROM watched_movies WHERE user_id = ?', (user_id,))
        movies = cursor.fetchall()
        total_movies = len(movies)
        avg_rating = round(sum(rating for _, rating in movies) / total_movies, 1) if total_movies > 0 else 0.0
        return movies, total_movies, avg_rating

create_db()

def notify_users():
    with sqlite3.connect(db_name) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT chat_id FROM users')
        users = cursor.fetchall()
        
        for user in users:
            chat_id = user[0]
            try:
                bot.send_message(chat_id, "–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start")
            except:
                pass

notify_users()

@bot.message_handler(commands=['start']) 
def start(message): 
    user_data[message.chat.id] = {'genre': None, 'vibe': None, 'year': None, 'watched_movies': []} 
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor() 
    cursor.execute('SELECT * FROM users WHERE chat_id = ?', (message.chat.id,)) 
    if cursor.fetchone() is None: 
        add_user(message.chat.id) 
    conn.close() 
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True) 
    markup.add('–§–∏–ª—å–º')
    markup.add('–ü—Ä–æ—Ñ–∏–ª—å') 
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–∏–Ω–æ—Ñ–∞–π–Ω–¥–µ—Ä. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä.",reply_markup=markup)

@bot.message_handler(regexp='–ü—Ä–æ—Ñ–∏–ª—å') 
def profile_handler(message, page=0):
    try:
        chat_id = message.chat.id
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
        user = cursor.fetchone()
        conn.close()

        if not user:
            bot.send_message(chat_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        user_id = user[0]
        movies, total_movies, avg_rating = get_watched_movies_info(user_id)
        if total_movies <= 5:
            status = "–ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–∏–Ω–æ–º–∞–Ω"
        elif total_movies <= 20:
            status = "–í –ø–æ–∏—Å–∫–µ —Å—Ç–∏–ª—è"
        elif total_movies <= 50:
            status = "–ó–Ω–∞—Ç–æ–∫ –∫–∏–Ω–æ"
        elif total_movies <= 100:
            status = "–ú–∞—Å—Ç–µ—Ä –∫–∏–Ω–æ"
        else:
            status = "–ö–∏–Ω–æ—ç–∫—Å–ø–µ—Ä—Ç"

        text = f"üé¨ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n–í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\nüìΩ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {total_movies}\n‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}/10"

        keyboard = types.InlineKeyboardMarkup()

        movies_per_page = 9
        start_index = page * movies_per_page
        end_index = start_index + movies_per_page
        movies_page = movies[start_index:end_index]

        for movie_name, rating in movies_page:
            row = [
                types.InlineKeyboardButton(text=f"üé¨ {movie_name}", callback_data=f"movie"),
                types.InlineKeyboardButton(text=f"‚≠ê {rating}/10", callback_data=f"rating")
            ]
            keyboard.add(*row)

        if end_index < total_movies:
            keyboard.add(types.InlineKeyboardButton("‚û° –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"profile_page_{page+1}"))



        bot.send_message(chat_id, text, reply_markup=keyboard, parse_mode="Markdown")
    except:
        pass



def create_profile_keyboard(movies, page):
    try:
        keyboard = types.InlineKeyboardMarkup()
        movies_per_page = 9
        start_index = page * movies_per_page
        end_index = start_index + movies_per_page
        movies_page = movies[start_index:end_index]

        for movie_name, rating in movies_page:
            row = [
                types.InlineKeyboardButton(text=f"üé¨ {movie_name}", callback_data=f"movie"),
                types.InlineKeyboardButton(text=f"‚≠ê {rating}/10", callback_data=f"rating")
            ]
            keyboard.add(*row)

        if end_index < len(movies):
            keyboard.add(types.InlineKeyboardButton (text="‚û° –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"profile_page_{page+1}"))

        return keyboard
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("profile_page_"))
def next_profile_page(call):
    try:
        page = int(call.data.split("_")[-1])
        profile_handler(call.message, page)
    except:
        pass

@bot.message_handler(regexp='–§–∏–ª—å–º')
def ask_for_genre(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        buttons = [telebot.types.KeyboardButton(genre) for genre in genres]
        markup.add(*buttons)
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    except:
        pass

@bot.message_handler(func=lambda message: message.text in genres)
def handle_genre(message):
    try:
        user_data[message.chat.id]['genre'] = message.text
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        buttons = [telebot.types.KeyboardButton(vibe) for vibe in vibes] 
        markup.add(*buttons)
        bot.send_message(message.chat.id, f"–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", reply_markup=markup)
    except:
        pass
@bot.message_handler(func=lambda message: message.text in vibes)
def handle_vibe(message):
    try:
        user_data[message.chat.id]['vibe'] = message.text
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        buttons = [telebot.types.KeyboardButton(year) for year in years] 
        markup.add(*buttons)
        markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        bot.send_message(message.chat.id, f"–ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É. –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞?", reply_markup=markup)
    except:
        pass
@bot.message_handler(func=lambda message: message.text in years)
def handle_year(message):
    try:
        user_data[message.chat.id]['year'] = message.text
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ù–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π')   
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É —Ñ–∏–ª—å–º–∞.", reply_markup=markup)
        bot.register_next_step_handler(message, handle_watched_movies)
    except:
        pass

def handle_watched_movies(message):
    try:
        comment = message.text
        user_data[message.chat.id]['comment'] = comment
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ñ–¥—É')
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –Ø –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ —Ñ–∏–ª—å–º.", reply_markup=markup)
        recommend_movie(message)
    except:
        pass
@bot.message_handler(regexp='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
def skip(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ù–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π')   
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É —Ñ–∏–ª—å–º–∞.", reply_markup=markup)
        bot.register_next_step_handler(message, handle_watched_movies)
    except:
        pass
def recommend_movie(message, old_message_id=None):
    try:
        chat_id = message.chat.id
        preferences = user_data.get(chat_id, {})
        watched_movies = get_watched_movies_with_ratings(chat_id)

        watched_movies_text = (
            ", ".join([f"- {movie}: {rating}/10" for movie, rating in watched_movies.items()])
            if watched_movies else "–ù–µ—Ç"
        )

        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ñ–∏–ª—å–º –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º:
        - –ñ–∞–Ω—Ä: {preferences.get('genre', '–ù–µ —É–∫–∞–∑–∞–Ω')}
        - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {preferences.get('vibe', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {preferences.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}
        - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø–æ–≤–æ–¥—É —Ñ–∏–ª—å–º–∞: {preferences.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω')}
        - –§–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∏ –∫–∞–∫ –æ–Ω –∏—Ö –æ—Ü–µ–Ω–∏–ª:
        {watched_movies_text}

        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ 3 —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —É—á–∏—Ç—ã–≤–∞—è —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ 1 (–≥–æ–¥) ‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ./n
        2. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ 2 (–≥–æ–¥) ‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ./n
        3. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ 3 (–≥–æ–¥) ‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ./n
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        """

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ñ–∏–ª—å–º—ã."},
                                          {"role": "user", "content": prompt}],
            max_tokens=350
        )

        recommendation = response['choices'][0]['message']['content'].strip()
        movie_list = recommendation.split("\n")

        movie_titles = []
        for movie in movie_list:
            title = movie.split('(')[0].strip().replace('"', '')  
            movie_titles.append(title)

        recommended_movies = user_data[chat_id].get("recommended_movies", [])
        filtered_movie_list = [title for title in movie_titles if title not in recommended_movies]

        if len(filtered_movie_list) < 3:
            filtered_movie_list += [title for title in movie_titles if title not in recommended_movies][:3-len(filtered_movie_list)]

        user_data[chat_id]["recommended_movies"] = filtered_movie_list

        keyboard = types.InlineKeyboardMarkup()
        for idx, movie_name in enumerate(filtered_movie_list):
            movie_id = f"movie_{idx}" 
            if len(movie_id) > 20:
                movie_id = movie_id[:20] 
            keyboard.add(types.InlineKeyboardButton(text=movie_name, callback_data=movie_id))

        keyboard.add(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))

        if old_message_id:
            bot.delete_message(chat_id, old_message_id)
        bot.send_chat_action(chat_id, "typing")
        new_message = bot.send_message(chat_id, f"üé¨ –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≤–∞—Å:\n{recommendation}", reply_markup=keyboard)
        user_data[chat_id]["last_message_id"] = new_message.message_id
    except:
        pass

def get_movie_links(movie_name):
    movie_query = urllib.parse.quote(movie_name)

    sites = {
        "HDRezka": f"https://rezka.ag/search/?do=search&subaction=search&q={movie_query}",
        "Baskino": f"https://baskino.me/index.php?do=search&subaction=search&story={movie_query}",
        "Filmix": f"https://filmix.ac/search/{movie_query}"
    }

    valid_links = {}
    
    for site, url in sites.items():
        if check_link(url):
            valid_links[site] = url

    return valid_links

def check_link(url):
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers, timeout=5)
        return response.status_code == 200
    except:
        return False
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("movie_"))
def send_movie_details(call):
    try:
        chat_id = call.message.chat.id
        movie_index = int(call.data.split("_")[1])  
        movie_name = user_data[chat_id]["recommended_movies"][movie_index].split('‚Äî')[0].strip()
        movie_name = movie_name.split('.')[1].strip() if '.' in movie_name else movie_name.strip()

        prompt = f"–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ '{movie_name}', –Ω–µ –±–æ–ª–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏–ª—å–º–∞–º."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=200
        )
        movie_description = response['choices'][0]['message']['content'].strip()

        links = get_movie_links(movie_name)
        links_text = "\n".join([f"[{site}]({url})" for site, url in links.items()]) if links else "–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        movie_details = f"üé• *{movie_name}*\n\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ:* {movie_description}\n\nüîó *–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä:*\n{links_text}"
        bot.send_chat_action(chat_id, "typing")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"watch_{movie_index}"))
        bot.send_message(chat_id, movie_details, reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)

    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == "refresh")
def refresh_movies(call):
    try:
        chat_id = call.message.chat.id
        last_message_id = user_data.get(chat_id, {}).get("last_message_id")

        loading_message = bot.send_message(chat_id, "üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤...")
        bot.delete_message(chat_id, loading_message.message_id)

        recommend_movie(call.message, old_message_id=last_message_id)
    except:
        pass


@bot.callback_query_handler(func=lambda call: call.data.startswith("watch_"))
def mark_as_watching(call):
    try:
        chat_id = call.message.chat.id
        movie_index = int(call.data[6:])  

        movie_name = user_data[chat_id]["recommended_movies"][movie_index]  

        movie_name_cleaned = movie_name.split('.')[1].strip() if '.' in movie_name else movie_name.strip()

        add_watched_movie(chat_id, movie_name_cleaned)

        keyboard = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(text=f"{i} ‚≠ê", callback_data=f"rate_{movie_index}_{i}") for i in range(1, 11)]
        
        for i in range(0, 10, 5):
            keyboard.add(*buttons[i:i+5])

        bot.send_message(chat_id, f"–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–∏–ª—å–º {movie_name_cleaned}, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. üé¨üçø", 
                        reply_markup=keyboard, parse_mode="Markdown")
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("rate_"))
def rate_movie(call):
    try:
        chat_id = call.message.chat.id
        _, movie_index, rating = call.data.split("_")
        rating = int(rating)
        

        with sqlite3.connect(db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
            user = cursor.fetchone()

            if user:
                user_id = user[0]
                movie_name = user_data[chat_id]["recommended_movies"][int(movie_index)]  
                movie_name_cleaned = movie_name.split('.')[1].strip() if '.' in movie_name else movie_name.strip()
                cursor.execute('''
                    SELECT rating FROM watched_movies 
                    WHERE user_id = ? AND movie_name = ?
                ''', (user_id, movie_name_cleaned))

                existing_rating = cursor.fetchone()

                if existing_rating is not None:
                    cursor.execute('''
                        UPDATE watched_movies 
                        SET rating = ? 
                        WHERE user_id = ? AND movie_name = ?
                    ''', (rating, user_id, movie_name_cleaned))
                else:
                    cursor.execute('''
                        INSERT INTO watched_movies (user_id, movie_name, rating) 
                        VALUES (?, ?, ?)
                    ''', (user_id, movie_name_cleaned, rating))
        
        conn.commit()
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–§–∏–ª—å–º', '–ü—Ä–æ—Ñ–∏–ª—å')

        bot.send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ñ–∏–ª—å–º—É '{movie_name_cleaned}' –æ—Ü–µ–Ω–∫—É {rating}/10 ‚≠ê", reply_markup=markup)
    except:
        pass

bot.polling()